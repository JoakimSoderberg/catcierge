env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "Kza1lOgpHML3DiiKuRUji0xHXmDxsfMSxHgff/WR6+nOlubNpWUmf1OwWe4BBTX8GblKPXOlWFpzPtwA5l1NiT2rQ/s7ypsmCS16bGppV34VC77iJSAT6qrqao7Wb3iziRbtba5rVfiqHtEYJLw2q5psz9JcjI+G7On25jciM4M="
  matrix:
   - CAT_METHOD=memcheck CMAKE_ARGS="-DWITH_ZMQ=OFF"
   - CAT_METHOD=coverage CMAKE_ARGS="-DWITH_ZMQ=OFF -DCATCIERGE_WITH_MEMCHECK=OFF -DCATCIERGE_COVERALLS=ON -DCMAKE_BUILD_TYPE=Debug -DCATCIERGE_GUI_TESTS=ON" COVERALLS=yes
language: c
os:
  - linux
  - osx
sudo: false
cache:
  directories:
  - /tmp/opencv-2.4.10
  - /tmp/lcov-1.11
matrix:
  exclude:
    - os: osx
      env: CAT_METHOD=coverage CMAKE_ARGS="-DCATCIERGE_WITH_MEMCHECK=OFF -DCATCIERGE_COVERALLS=ON -DCMAKE_BUILD_TYPE=Debug -DCATCIERGE_GUI_TESTS=ON" COVERALLS=yes
before_install:
  # Enable running GUI tests to run with a dummy X-server.
  - if [ x$TRAVIS_OS_NAME == xlinux ]; then export DISPLAY=:99.0; fi
  - if [ x$TRAVIS_OS_NAME == xlinux ]; then sh -e /etc/init.d/xvfb start; fi
install:
  - if [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ x$TRAVIS_OS_NAME == xlinux ] && [ ! -d "/tmp/opencv-2.4.10/build" ]; then cd /tmp && curl -L -O http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.10/opencv-2.4.10.zip && unzip -o opencv-2.4.10.zip && cd opencv-2.4.10 && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_opencv_java=OFF -DBUILD_JASPER=ON -DWITH_JASPER=ON -DBUILD_ZLIB=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DWITH_OPENEXR=OFF -DBUILD_PNG=ON -DWITH_PNG=ON -DWITH_TIFF=ON -DBUILD_TIFF=ON -DWITH_WEBP=OFF -DWITH_JPEG=ON -DBUILD_JPEG=ON .. && make; fi
  - if [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ x$TRAVIS_OS_NAME == xlinux ]; then cd /tmp && curl -L -O https://github.com/linux-test-project/lcov/archive/v1.11.zip && unzip -o v1.11.zip; fi
  - if [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ x$TRAVIS_OS_NAME == xosx ]; then brew update && brew tap homebrew/science && brew link --overwrite numpy && brew install opencv --env=std; fi
script:
  # Only run coverage on Linux/gcc.
  - if [ x$CAT_METHOD == xcoverage ] && [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ x$TRAVIS_OS_NAME == xlinux ]; then cd $TRAVIS_BUILD_DIR && ls /tmp/lcov-1.11 && mkdir build && cd build && cmake -DRPI=0 -DCMAKE_PROGRAM_PATH=/tmp/lcov-1.11/bin -DOpenCV_DIR=/tmp/opencv-2.4.10/build $CMAKE_ARGS .. && make && make coveralls; fi
  - if [ x$CAT_METHOD == xmemcheck ] && [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ x$TRAVIS_OS_NAME == xlinux ]; then cd $TRAVIS_BUILD_DIR && mkdir build && cd build && cmake -DRPI=0 -DOpenCV_DIR=/tmp/opencv-2.4.10/build $CMAKE_ARGS .. && make && ctest --output-on-failure; fi
  - if [ x$CAT_METHOD == xmemcheck ] && [ "$COVERITY_SCAN_BRANCH" != 1 ] && [ x$TRAVIS_OS_NAME == xosx ]; then cd $TRAVIS_BUILD_DIR && mkdir build && cd build && cmake -DRPI=0 -DOpenCV_DIR=/usr/local/Cellar/opencv/2.4.9/build $CMAKE_ARGS .. && make && ctest --output-on-failure; fi

after_success:
  - bash <(curl -s https://codecov.io/bash)

addons:
  coverity_scan:
    project:
      name: "JoakimSoderberg/catcierge"
    notification_email: joakim.soderberg@gmail.com
    build_command_prepend: "mkdir build && cd build && cmake -DRPI=OFF -DCATCIERGE_WITH_MEMCHECK=OFF .."
    build_command: "make"
    branch_pattern: coverity_scan
